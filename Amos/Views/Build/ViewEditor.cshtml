@model Amos.Models.PageViewModel
@{
    ViewBag.Title = "Editor";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var pageTypeList = new List<SelectListItem>();
    pageTypeList.Add(new SelectListItem { Text = "content", Value = "content" });
    pageTypeList.Add(new SelectListItem { Text = "quiz", Value = "quiz" });
    pageTypeList.Add(new SelectListItem { Text = "survey", Value = "survey" });
}

@section styles{

    <link href="~/Content/css/preview.css" rel="stylesheet" />
}

<div class="container-fluid" style="margin-bottom:10px;width:50%;">
    <div class="input-group">
        <span class="input-group-addon" id="basic-addon1">Name</span>
        <input id="PageName" type="text" class="form-control" placeholder="New Page" aria-describedby="basic-addon1" value="@Model.PageName">
    </div>
</div>

<div class="container-fluid" style="width:50%;">
    <div class="input-group">
        <span class="input-group-addon" id="basic-addon2">Type</span>
        <select id="PageType" name="PageType" class="form-control" aria-describedby="basic-addon2">
            <option @if (Model.PageType == "content") { WriteLiteral(" selected='selected' "); } value="content">content</option>
            <option @if (Model.PageType == "quiz") { WriteLiteral(" selected='selected' "); } value="quiz">quiz</option>
            <option @if (Model.PageType == "survey") { WriteLiteral(" selected='selected' "); } value="survey">survey</option>
        </select>
    </div>

</div>

<div class="container-fluid" style="width:50%;margin-top:20px;text-align:center">
    <div class="col-lg-4">
        @if (Model.BookId == 0)
        {
            <a href="@Url.Action("ListPages")" type="button" class="btn btn-default">
                <i class="fa fa-arrow-left"></i>
                Back to list
            </a>
        }
        else
        {
            <a href="@Url.Action("Index", "Configure", new { id = Model.BookId })" type="button" class="btn btn-default">
                <i class="fa fa-arrow-left"></i>
                Back to outline
            </a>
        }

    </div>
    <div class="col-lg-4">
        <button id="save-page" type="button" class="btn btn-primary">
            <i class="fa fa-save"></i>
            Save Page
        </button>
    </div>
    <div class="col-lg-4">
        <button type="button" id="view-page" class="btn btn-default">
            Preview <i class="fa fa-arrow-right"></i>
        </button>
    </div>
</div>

<div class="container-fluid" style="width:50%;margin-top:20px;border:1px solid black;border-radius:10px;">
    <p style="margin-top:5px;"><b>Validation</b></p>
    <div id="validation-box"></div>
    <table class="table" id="outline-box"></table>
</div>

<hr />


<div class="row" style="margin-top:20px;">
    <div class="col-lg-6">
        <p>XML</p>
        <textarea id="XmlContent" style="width:100%;height:400px;" @*style="width:800px;height:400px;max-width:800px;"*@>@Model.XmlContent</textarea>
    </div>
    <div class="col-lg-6">
        <div class="preview-window"></div>
    </div>
</div>




@*<div class="row">
        <div class="col-lg-12">
            <textarea id="XmlContent" style="width:800px;height:400px;max-width:800px;">@Model.XmlContent</textarea>

        </div>
    </div>*@




@Html.HiddenFor(x => x.PageId)


@section scripts{
    <script src="~/Content/js/shared.js"></script>
    <script src="~/Content/js/preview-render.js"></script>
    <script>
        var URL_SavePage = '@Url.Action("SavePage")';
        var URL_ViewPage = '@Url.Action("ViewPage", new { id = Model.PageId })';
        var wto;
        var applicationMode = "online";
        var URL_Content = '@Url.Content("~/")';
        var DirtyPage = false;


        function savePageSuccess(data) {
            DirtyPage = false;
            alert("Page saved");
        }

        function savePageFail(data) {
            alert("Fail :( Check the console");
            console.log('fail', data);
        }
        $(function () {
            $(window).bind('beforeunload', function () {
                if (DirtyPage)
                    return 'Are you sure you want to leave?';
            });

            $("#XmlContent").on('change', function () { DirtyPage = true; });

            $("#save-page").on('click', function () {
                savePage(savePageSuccess);
            });

            $("#view-page").on('click', function () {
                savePage(function () {
                    window.location = URL_ViewPage;
                });

            });

            updateValidateWindow();
            $("#XmlContent").keyup(function () {
                clearTimeout(wto);
                wto = setTimeout(updateValidateWindow, 1000);
            });

        });

        function savePage(callback) {

            if ($("#PageName").val().trim() === "") {
                alert("Please enter a page name.");
                return false;
            }


            var content = $("#XmlContent").val();
            var arr;
            try {
                arr = $.parseXML(content);
            } catch (e) {
                alert("XML couldn't be parsed. Check if it's valid. " + e.Message);
                return false;
            }

            //.item src
            //var arr = $(".item").map(function () { return $(this).prop('src'); }).get();
            var arr = $(arr).find("image").map(function () {
                return this.attributes["source"].value;
            }).get();

            //var s = new XMLSerializer();
            var str = content.replace(/(\r\n\t|\n|\r\t)/gm, "");//s.serializeToString($("#XmlContent").val());
            var pId = $("#PageId").val();
            var name = $("#PageName").val().trim();
            transmitAction(URL_SavePage, callback(), savePageFail, "",
                {
                    xml: str,
                    images: arr,
                    pageId: pId,
                    name: name,
                    type: $("#PageType").val()
                }
                , true);

        }

        var xt = "", h3OK = 1;
        function checkErrorXML(x) {
            xt = "";
            h3OK = 1;
            checkXML(x);
        }

        function checkXML(n) {
            var l, i, nam;
            nam = n.nodeName;
            if (nam == "h3") {
                if (h3OK == 0) {
                    return;
                }
                h3OK = 0;
            }
            if (nam == "#text") {
                xt = xt + n.nodeValue + "\n";
            }
            l = n.childNodes.length
            for (i = 0; i < l; i++) {
                checkXML(n.childNodes[i]);
            }
        }

        function updateValidateWindow() {
            var content = $("#XmlContent").val();

            // From: https://www.w3schools.com/xml/xml_validator.asp
            if (window.ActiveXObject) {
                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = false;
                xmlDoc.loadXML(content);
                if (xmlDoc.parseError.errorCode != 0) {
                    txt = "Error Code: " + xmlDoc.parseError.errorCode + "\n";
                    txt = txt + "Error Reason: " + xmlDoc.parseError.reason;
                    txt = txt + "Error Line: " + xmlDoc.parseError.line;
                    $("#validation-box").text(txt);
                }
                else {
                    $("#validation-box").text("No errors found.");
                }
            }
            // code for Mozilla, Firefox, Opera, etc.
            else if (document.implementation.createDocument) {
                try {
                    var text = content;
                    var parser = new DOMParser();
                    var xmlDoc = parser.parseFromString(text, "application/xml");
                }
                catch (err) {
                    $("#validation-box").text(err.message);
                }

                if (xmlDoc.getElementsByTagName("parsererror").length > 0) {
                    checkErrorXML(xmlDoc.getElementsByTagName("parsererror")[0]);
                    $("#validation-box").text(xt);
                }
                else {
                    $("#validation-box").text("No errors found.");
                }

                // loop through the xml doc

                var childNodes = xmlDoc.documentElement.childNodes;
                for (var i = 0; i < childNodes.length; i++) {
                    displayAndLoopChildNodes(childNodes[i]);
                }
            }
            else {
                alert('Your browser cannot handle XML validation');
            }

            try {
                var strippedText = $("#XmlContent").val().replace(/(\r\n\t|\n|\r\t)/gm, "");
                var newXml = $.parseXML(strippedText);
                $(".preview-window").empty();
                $(newXml).contents().contents().each(function () {
                    if (!blankTextNode(this))
                        $(".preview-window").first().append(renderElement(this));
                });
            } catch{}


        }

        function displayAndLoopChildNodes(node) {
            // take note of the actual node
        }
    </script>
}