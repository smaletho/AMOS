@model IEnumerable<Amos.Models.Page>

@{
    ViewBag.Title = "Pages List";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

@section styles{
    <link href="~/Content/css/preview.css" rel="stylesheet" />
    <style>
        .modal-lg {
            height: 480px;
        }

            .modal-lg .modal-footer {
                margin-top: -360px;
            }
    </style>

}

<h2>ListPages</h2>

<p>
    @Html.ActionLink("Create New Page", "ViewEditor", new { id = 0 })
</p>
<table class="table table-striped table-hover">
    <tr>
        <td>Id</td>
        <th>Page Name</th>
        <th>Page Type</th>
        <th>Modified</th>
        <th>Created</th>
        <th></th>
        @*<th></th>*@
    </tr>

    @foreach (var item in Model.OrderBy(x => x.Title))
    {
        <tr class="@getRowClasses(item.PageId)" data-pageid="@item.PageId">
            <td>
                @Html.DisplayFor(modelItem => item.PageId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ModifyDate)<br />
                @Html.DisplayFor(modelItem => item.ModifiedBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreateDate)<br />
                @Html.DisplayFor(modelItem => item.CreatedBy)
            </td>
            <td>
                <div class="dropdown">
                    <button class="btn btn-default dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Page Actions <span class="caret"></span>
                    </button>

                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                        <li><a href="@Url.Action("ViewEditor", new { id = item.PageId })">edit</a></li>
                        <li><a href="@Url.Action("ViewPage", new { id = item.PageId })">preview</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a data-toggle="modal" data-target="#previewDialog" data-pageid="@item.PageId">quick view</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a data-toggle="modal" data-target="#confirmDeleteDialog" data-pageid="@item.PageId">delete</a></li>
                        <li><a href="@Url.Action("DuplicatePage", new { id = item.PageId })">duplicate</a></li>
                    </ul>
                </div>
            </td>


            @*<td>
                    <div class="preview-window"></div>
                </td>*@
        </tr>
    }

</table>

<div class="modal fade" tabindex="-1" role="dialog" id="confirmDeleteDialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Confirm Delete</h4>
            </div>
            <div class="modal-body">
                <p>Would you like to delete this page?</p>
                <p><i>Warning: This action cannot be undone.</i></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" onclick="deletePage(this)" id="confirmDeleteButton" data-pageid="0" class="btn btn-primary">Delete</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="previewDialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Page Preview</h4>
            </div>
            <div class="modal-body preview-window">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                @*<button type="button" onclick="deletePage(this)" id="confirmDeleteButton" data-pageid="0" class="btn btn-primary">Delete</button>*@
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

@section scripts{
    <script>
        var applicationMode = "online";
        var URL_Content = '@Url.Content("~/")';
        var pageContentAndId = [];
    </script>
    <script src="~/Content/js/preview-render.js"></script>

    <script src="~/Content/js/shared.js"></script>
    <script>
        function transmitFail(data) {
            alert('Error');
            console.log('error', data);
        }
        function deletePage(element) {
            var id = $(element).data('pageid');
            transmitAction('@Url.Action("DeletePage")', function (data) {
                window.location = '@Url.Action("ListPages")';
            }, transmitFail, "", { id: id }, true);
        }

        $(function () {
            $("#confirmDeleteDialog").on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget); // Button that triggered the modal
                var pageId = button.data('pageid'); // Extract info from data-* attributes

                $("#confirmDeleteButton").data('pageid', pageId);
            });

            $("#previewDialog").on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget); // Button that triggered the modal
                var pageId = button.data('pageid'); // Extract info from data-* attributes

                var modal = $(this)
                $(modal).find('.preview-window').empty();

                for (var i = 0; i < pageContentAndId.length; i++) {
                    if (pageContentAndId[i].PageId == pageId) {
                        var content = pageContentAndId[i].PageContent;
                        var xml = $.parseXML(content);
                        $(xml).contents().contents().each(function () {
                            //console.log(this);
                            if (!blankTextNode(this))
                                $(modal).find('.preview-window').first().append(renderElement(this));
                        });
                        break;
                    }
                }

            });

            transmitAction('@Url.Action("GetContent")', function (data) {

                pageContentAndId = data;

                //$(".page-row").each(function () {
                //    // find the corresponding content and render
                //    var id = $(this).data("pageid");
                //    var pageRow = this;
                //    for (var i = 0; i < data.length; i++) {
                //        if (data[i].PageId == id) {
                //            var content = data[i].PageContent;
                //            var xml = $.parseXML(content);
                //            $(xml).contents().contents().each(function () {
                //                console.log(this);
                //                $(pageRow).find(".preview-window").first().append(renderElement(this));
                //            });
                //            break;
                //        }
                //    }
                //});

            }, transmitFail, "", {}, true);


        });
    </script>

}

@functions{
    string getRowClasses(int id)
    {
        int previousId = 0;
        if (Session["LastPageIdVisited"] != null)
        {
            previousId = (int)Session["LastPageIdVisited"];
        }
        if (id == previousId)
        {
            return "page-row warning";
        }
        else
        {
            return "page-row";
        }
    }

}