@model Amos.Models.ManagePagesModel
@{
    ViewBag.Title = "Manage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styles{
    <style>

        .scrollable-menu {
            height: auto;
            max-height: 500px;
            overflow-x: hidden;
        }
        .btn-group-justified .btn-group {
            padding-left: 10px;
            padding-right: 10px;
        }
    </style>
}
@{
    string name = Model.PageListModel.GetBook.Name ?? "New Book";
    string version = Model.PageListModel.GetBook.Version ?? "1";
}
<div class="container" style="width:50%;">
    <div class="input-group input-group-lg" style="margin-bottom:10px;">
        <span class="input-group-addon" id="basic-addon1">Book Name</span>
        <input type="text" class="form-control bookName" placeholder="Book Name" aria-label="Book Name" aria-describedby="basic-addon1" value="@name" />
    </div>
    <div class="input-group">
        <span class="input-group-addon" id="basic-addon2">Version</span>
        <input type="text" class="form-control bookVersion" placeholder="Version" aria-label="Version" aria-describedby="basic-addon2" value="@version" />
    </div>
</div>

<hr />
@if (Model.PageListModel.GetBook.Published)
{
    <div class="row">
        <div class="col-md-6 col-md-offset-3 alert alert-warning btn" role="alert">
            <a href="#" class="alert-link" data-toggle="modal" data-target="#lockedBookModal">
                <i class="fa fa-lock"></i>
                This book is published, and cannot be edited. Click for more information.
            </a>
        </div>
        <div class="col-md-3"></div>
    </div>
    <div class="modal fade" id="lockedBookModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Unpublish book?</h4>
                </div>
                <div class="modal-body">
                    <p>Un-publishing the book for editing will make the book inaccessible to users while being edited.</p>
                    <p>To edit this book, click the "continue" button below.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">cancel</button>
                    <button type="button" class="btn btn-primary" onclick="enableDisable(false);">continue</button>
                </div>
            </div>
        </div>
    </div>
}
else
{

    <div class="row">
        <div class="col-md-6 col-md-offset-3 alert alert-info btn" role="alert">
            <a class="alert-link" data-toggle="modal" data-target="#unlockedBookModal">
                <i class="fa fa-unlock"></i>
                This book is NOT published, and can be edited. Click to publish.
            </a>
        </div>
        <div class="col-md-3"></div>
    </div>
    <div class="modal fade" id="unlockedBookModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Publish book?</h4>
                </div>
                <div class="modal-body">
                    <p>Publishing this book will allow it to be viewed by all users.</p>
                    <p>To publish this book, click continue to validate it.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">cancel</button>

                    <button type="button" class="btn btn-primary" id="load" onclick="enableDisable(true)" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Validating...">Validate and Publish</button>

                </div>
            </div>
        </div>
    </div>

    <div class="btn-group-justified" style="width:50%;margin:0 auto">
        <div class="btn-group">
            <a class="btn btn-primary" href="@Url.Action("Index","Configure", new { id=Model.PageListModel.GetBook.BookId })">Organize Book &amp; Pages</a>
        </div>
        <div class="btn-group">
            <a class="btn btn-primary" href="@Url.Action("ManageButtons", new { id=Model.PageListModel.GetBook.BookId })">Manage Page Buttons</a>
        </div>
    </div>

    <div class="col-md-8 col-md-offset-2" id="error-list">

    </div>

    @*<div class="col-md-8 col-md-offset-2">
        <a class="btn btn-default" href="@Url.Action("Edit", new { id=Model.PageListModel.GetBook.BookId })">
            Click here (old)
        </a>
        <a class="btn btn-default" href="@Url.Action("Index","Configure", new { id=Model.PageListModel.GetBook.BookId })">
            Click here (new)
        </a>
        to edit and organize this book. Here, pages can be added, rearranged, removed, or renamed.
    </div>
    <div class="col-md-2"></div>

    <hr />

    <div class="container col-md-12" style="margin-top:20px;">
        <p class="alert alert-info">
            Below, you will find a list of links and buttons used within this book.
            <br />Use this interface to
            connect each button to the corresponding page that you would like it to navigate to.
        </p>
    </div>

    <table id="button-table" class="table table-hover table-striped">



        @Html.Action("BuildButtonList", new { model = Model })


    </table>*@
}



@functions{
    string shouldDisable()
    {
        if (Model.PageListModel.GetBook.Published) return " disabled";
        else return "";
    }
}
@section scripts{
    <script src="~/Content/js/shared.js"></script>
    <script>
        @*var model = JSON.parse('@Html.Raw(Json.Encode(Model))');*@

        function enableDisable_success(data) {
            if (data == "success")
                window.location.reload();
            else {
                $("#error-list").empty();
                $("#load").button('reset');
                $("[data-dismiss=modal]").trigger({ type: "click" });
                if (data.Errors) {
                    errorStr = "<ul class=\"list-group\">";
                    for (var i = 0; i < data.Details.split("\n").length; i++) {
                        newStr = "<li class=\"list-group-item list-group-item-warning\">" + data.Details.split("\n")[i] + "</li>";
                        if (newStr != "<li class=\"list-group-item list-group-item-warning\"></li>")
                            errorStr += newStr;
                    }
                    errorStr += "</ul>";

                    $("#error-list").append(errorStr);
                } else {
                    location.reload();
                }
            }
        }
        function enableDisable_fail(data) {
            alert("Error");
            console.log("error", data);
        }
        function enableDisable(isPublish) {
            $("#load").button('loading');

            transmitAction('@Url.Action("ChangePublishStatus")', enableDisable_success, enableDisable_fail, "", { BookId: @Model.PageListModel.GetBook.BookId, IsPublish: isPublish }, true);
        }

        function assignButton(buttonId, onPageId, toPageId, element) {
            $(element).closest("ul").prev("button").button("loading");
            transmitAction('@Url.Action("AssignButton")', function (data) {
                $("#button-table").empty();
                $("#button-table").append(data);
                $(element).closest("ul").prev("button").button("reset");
            }, enableDisable_fail, "", { buttonId: buttonId, onPageId: onPageId, toPageId: toPageId }, true);
        }

        $(function () {
            $(".btn").button();
            $(".btn").on('click', function () {
                $(this).button("loading");
            });
        });

        @*$(function () {
            transmitAction('@Url.Action("BuildButtonList")', function (data) {
                $("#button-table").empty();
                $("#button-table").append(data);
            }, function (data) { }, "", { model }, true);
        });*@
    </script>

}